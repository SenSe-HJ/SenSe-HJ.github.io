<!DOCTYPE html>



  


<html class="theme-next gemini use-motion" lang="zh-Hans">
<head><meta name="generator" content="Hexo 3.9.0">
  <meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
<meta name="theme-color" content="#222">

<script>
    (function () {
        if ('') {
            if (prompt('请输入文章密码') !== '') {
                alert('密码错误！');
                if (history.length === 1) {
                    location.replace("https://evenyao.com"); // 这里替换成你的首页
                } else {
                    history.back();
                }
            }
        }
    })();
</script>








<meta http-equiv="Cache-Control" content="no-transform">
<meta http-equiv="Cache-Control" content="no-siteapp">
















  
  
  <link href="/lib/fancybox/source/jquery.fancybox.css?v=2.1.5" rel="stylesheet" type="text/css">







<link href="/lib/font-awesome/css/font-awesome.min.css?v=4.6.2" rel="stylesheet" type="text/css">

<link href="/css/main.css?v=5.1.4" rel="stylesheet" type="text/css">


  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon.png?v=5.1.4">


  <link rel="icon" type="image/png" sizes="32x32" href="/images/s-32×32.png?v=5.1.4">


  <link rel="icon" type="image/png" sizes="16x16" href="/images/s-16×16.png?v=5.1.4">


  <link rel="mask-icon" href="/images/logo.svg?v=5.1.4" color="#222">





  <meta name="keywords" content="python基础,">










<meta name="description" content="一、列表生成式1.1 列表生成式的作用 简化‘有规律的列表’的生成  1.2 基本语句类型1.2.1 表达式 + for 循环12&amp;gt;&amp;gt;&amp;gt; [x*x for x in range(1,11)][1, 4, 9, 16, 25, 36, 49, 64, 81, 100]  1.2.2 表达式 + for 循环 + if 判断12&amp;gt;&amp;gt;&amp;gt; [x*x for x in r">
<meta name="keywords" content="python基础">
<meta property="og:type" content="article">
<meta property="og:title" content="python基础：迭代器">
<meta property="og:url" content="https://github.com/SenSe-HJ/python基础：迭代器">
<meta property="og:site_name" content="SenSe-HJ">
<meta property="og:description" content="一、列表生成式1.1 列表生成式的作用 简化‘有规律的列表’的生成  1.2 基本语句类型1.2.1 表达式 + for 循环12&amp;gt;&amp;gt;&amp;gt; [x*x for x in range(1,11)][1, 4, 9, 16, 25, 36, 49, 64, 81, 100]  1.2.2 表达式 + for 循环 + if 判断12&amp;gt;&amp;gt;&amp;gt; [x*x for x in r">
<meta property="og:locale" content="zh-Hans">
<meta property="og:updated_time" content="2019-08-20T17:51:18.879Z">
<meta name="twitter:card" content="summary">
<meta name="twitter:title" content="python基础：迭代器">
<meta name="twitter:description" content="一、列表生成式1.1 列表生成式的作用 简化‘有规律的列表’的生成  1.2 基本语句类型1.2.1 表达式 + for 循环12&amp;gt;&amp;gt;&amp;gt; [x*x for x in range(1,11)][1, 4, 9, 16, 25, 36, 49, 64, 81, 100]  1.2.2 表达式 + for 循环 + if 判断12&amp;gt;&amp;gt;&amp;gt; [x*x for x in r">



<script type="text/javascript" id="hexo.configurations">
  var NexT = window.NexT || {};
  var CONFIG = {
    root: '/',
    scheme: 'Gemini',
    version: '5.1.4',
    sidebar: {"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},
    fancybox: true,
    tabs: true,
    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},
    duoshuo: {
      userId: '0',
      author: '博主'
    },
    algolia: {
      applicationID: '',
      apiKey: '',
      indexName: '',
      hits: {"per_page":10},
      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}
    }
  };
</script>



  <link rel="canonical" href="https://github.com/SenSe-HJ/python基础：迭代器">





<link rel="stylesheet" href="<%- url_for('/fa-brands/css/fa-brands.min.css') %>">
<link rel="stylesheet" href="<%- url_for('/fa-regular/css/fa-regular.min.css') %>">
<link rel="stylesheet" href="<%- url_for('/fa-solid/css/fa-solid.min.css') %>">
<link rel="stylesheet" href="<%- url_for('/fontawesome/css/fontawesome.min.css') %>">
<link rel="stylesheet" href="<%- url_for('/fontawesome-all/css/fontawesome-all.css') %>">

<link href="https://use.fontawesome.com/releases/v5.0.4/css/all.css" rel="stylesheet">

  <title>python基础：迭代器 | SenSe-HJ</title>
  








</head>

<body itemscope itemtype="http://schema.org/WebPage" lang="zh-Hans">

  
  
    
  

  <div class="container sidebar-position-left page-post-detail">
    <div class="headband"></div>

    <a href="https://github.com/SenSe-HJ" class="github-corner" aria-label="View source on GitHub"><svg width="80" height="80" viewbox="0 0 250 250" style="fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;" aria-hidden="true"><path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"/><path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"/><path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"/></svg></a><style>.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}</style>

    <header id="header" class="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="header-inner"><div class="site-brand-wrapper">
  <div class="site-meta ">
    

    <div class="custom-logo-site-title">
      <a href="/" class="brand" rel="start">
        <span class="logo-line-before"><i></i></span>
        <span class="site-title">SenSe-HJ</span>
        <span class="logo-line-after"><i></i></span>
      </a>
    </div>
      
        <p class="site-subtitle">一个展现自我的平台</p>
      
  </div>

  <div class="site-nav-toggle">
    <button>
      <span class="btn-bar"></span>
      <span class="btn-bar"></span>
      <span class="btn-bar"></span>
    </button>
  </div>
</div>

<nav class="site-nav">
  

  
    <ul id="menu" class="menu">
      
        
        <li class="menu-item menu-item-home">
          <a href="/" rel="section">
            
            首页
          </a>
        </li>
      
        
        <li class="menu-item menu-item-tags">
          <a href="/tags/" rel="section">
            
            标签
          </a>
        </li>
      
        
        <li class="menu-item menu-item-categories">
          <a href="/categories/" rel="section">
            
            分类
          </a>
        </li>
      
        
        <li class="menu-item menu-item-关于我">
          <a href="/about_me/" rel="section">
            
            关于我
          </a>
        </li>
      

      
    </ul>
  

  
</nav>



 </div>
    </header>

    <main id="main" class="main">
      <div class="main-inner">
        <div class="content-wrap">
          <div id="content" class="content">
            

  <div id="posts" class="posts-expand">
    

  

  
  
  

  <article class="post post-type-normal" itemscope itemtype="http://schema.org/Article">
  
  
  
  <div class="post-block">
    <link itemprop="mainEntityOfPage" href="https://github.com/SenSe-HJ/python基础：迭代器">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="name" content="HJ">
      <meta itemprop="description" content>
      <meta itemprop="image" content="/images/header.jpg">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="SenSe-HJ">
    </span>

    
      <header class="post-header">

        
        
          <h1 class="post-title" itemprop="name headline">python基础：迭代器</h1>
        

        <div class="post-meta">

          <span class="post-time">
            
              <span class="post-meta-item-icon">
                <i class="fa fa-calendar-o"></i>
              </span>
              
                <span class="post-meta-item-text">发表于</span>
              
              <time title="创建于" itemprop="dateCreated datePublished" datetime="2019-08-01T15:58:23+08:00">
                2019-08-01
              </time>
            

            

            
          </span>

          
            <span class="post-category">
            
              <span class="post-meta-divider">|</span>
            
              <span class="post-meta-item-icon">
                <i class="fa fa-folder-o"></i>
              </span>
              
                <span class="post-meta-item-text">分类于</span>
              
              
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/categories/python基础/" itemprop="url" rel="index">
                    <span itemprop="name">python基础</span>
                  </a>
                </span>

                
                
              
            </span>
          

          
            
          

          
          

          

          

          

        </div>
      </header>
    

    
    
    
    <div class="post-body" itemprop="articleBody">

      
      

      
        <h1 id="一、列表生成式"><a href="#一、列表生成式" class="headerlink" title="一、列表生成式"></a>一、列表生成式</h1><h2 id="1-1-列表生成式的作用"><a href="#1-1-列表生成式的作用" class="headerlink" title="1.1 列表生成式的作用"></a>1.1 列表生成式的作用</h2><ul>
<li>简化‘有规律的列表’的生成</li>
</ul>
<h2 id="1-2-基本语句类型"><a href="#1-2-基本语句类型" class="headerlink" title="1.2 基本语句类型"></a>1.2 基本语句类型</h2><h3 id="1-2-1-表达式-for-循环"><a href="#1-2-1-表达式-for-循环" class="headerlink" title="1.2.1 表达式 + for 循环"></a>1.2.1 表达式 + for 循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure>

<h3 id="1-2-2-表达式-for-循环-if-判断"><a href="#1-2-2-表达式-for-循环-if-判断" class="headerlink" title="1.2.2 表达式 + for 循环 + if 判断"></a>1.2.2 表达式 + for 循环 + if 判断</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span> <span class="keyword">not</span>(x % <span class="number">2</span>)]</span><br><span class="line">[<span class="number">4</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">64</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>表达式可以是（1）数字运算、（2）字符串处理、（3）布尔值判断、（4）数据类型的对象方法等</li>
</ul>
<h3 id="1-2-3-表达式-双层-for-循环"><a href="#1-2-3-表达式-双层-for-循环" class="headerlink" title="1.2.3 表达式 + 双层 for 循环"></a>1.2.3 表达式 + 双层 for 循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x*y <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">4</span>) <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">4</span>)]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>理论上可以实现三层及以上的for循环，但实际中较少用到</li>
<li>每层for循环后都可以跟if判断</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x*y <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">4</span>) <span class="keyword">if</span> x % <span class="number">2</span> <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">4</span>) <span class="keyword">if</span> y % <span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure>

<h1 id="二、生成器（generator）"><a href="#二、生成器（generator）" class="headerlink" title="二、生成器（generator）"></a>二、生成器（generator）</h1><h2 id="2-1-生成器的作用"><a href="#2-1-生成器的作用" class="headerlink" title="2.1 生成器的作用"></a>2.1 生成器的作用</h2><p>生成器会<strong>存储数据的生成规则</strong>，每次迭代就会调用一次生成规则生成一个数据，即<strong>边迭代边生成</strong>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = (x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> each <span class="keyword">in</span> l:</span><br><span class="line">	print(each)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>

<p>当一组有规律的值需要进行<strong>迭代运算</strong>时，既可以存储于列表之中进行迭代，也可以存放于生成器之中进行迭代。但<strong>生成器所占内存远比列表小得多</strong>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l =[x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10000</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.getsizeof(l)</span><br><span class="line"><span class="number">87624</span>                             <span class="comment"># 由1万个元素组成的列表所占的内存</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = (x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10000</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.getsizeof(n)</span><br><span class="line"><span class="number">120</span>                               <span class="comment"># 可以生成1万个元素的生成器所占的内存</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意：生成器不是列表，所以不能对生成器进行访问</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>n[<span class="number">1</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#13&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    n[<span class="number">1</span>]</span><br><span class="line">TypeError: <span class="string">'generator'</span> object <span class="keyword">is</span> <span class="keyword">not</span> subscriptable</span><br></pre></td></tr></table></figure>

<h2 id="2-2-生成器的简单创建方法"><a href="#2-2-生成器的简单创建方法" class="headerlink" title="2.2 生成器的简单创建方法"></a>2.2 生成器的简单创建方法</h2><p>将列表生成式的[ ]改成( )，即会创建一个生成器。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>(x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span>)</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x0000000002F3ED68</span>&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>（）括号内的代码编写方法与列表生成式相同，在此不再赘述。</li>
<li>当生成器的生成完最后一个数字后，在此调用生成器则会抛出“<strong>StopIternation</strong>”这个错误。我们可以用try语句捕获这个错误，从而进行相关操作。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(l)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(l)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(l)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(l)</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(l)</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(l)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#26&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    next(l)</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure>

<h2 id="2-3-生成器的函数生成方法"><a href="#2-3-生成器的函数生成方法" class="headerlink" title="2.3 生成器的函数生成方法"></a>2.3 生成器的函数生成方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span>          <span class="comment">#生成斐波拉契数列</span></span><br><span class="line">	n,a,b = <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">	<span class="keyword">while</span> n &lt; max:</span><br><span class="line">		<span class="keyword">yield</span> b            <span class="comment"># 生成器的必备语句yield</span></span><br><span class="line">		a,b = b,a+b</span><br><span class="line">		n += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>以上代码是用于生成斐波拉契数列，其中第四行的“<strong>yield</strong>”语句是生成器的必要元素<strong>。其作用是在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行</strong>。<br>调用并执行，结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> each <span class="keyword">in</span> fib(<span class="number">8</span>):</span><br><span class="line">	print(each)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">21</span></span><br></pre></td></tr></table></figure>

<h1 id="三、迭代器"><a href="#三、迭代器" class="headerlink" title="三、迭代器"></a>三、迭代器</h1><h2 id="3-1-迭代对象与迭代器的关系"><a href="#3-1-迭代对象与迭代器的关系" class="headerlink" title="3.1 迭代对象与迭代器的关系"></a>3.1 迭代对象与迭代器的关系</h2><p>从外部调用函数层面上比较：</p>
<ul>
<li>可以被for循环迭代的对象即称为可迭代对象（iterable）</li>
<li>可以被next（）函数执行的对象称为迭代器（iterator）</li>
</ul>
<p>从内部方法层面上比较：</p>
<ul>
<li>定义有“<strong>iter</strong>”方法的实例对象即称为可迭代对象（iterable）</li>
<li>定义有“__ iter__”方法和“__ next__”方法的实例对象称为迭代器（iterator）</li>
</ul>
<p>由上可知：<strong>迭代器一定是可迭代对象，而可迭代对象不一定是迭代器</strong>。而上一节所说的生成器便是迭代器的一种。</p>
<ul>
<li>可迭代对象可以通过 <strong>iter（）函数</strong> 转化为迭代器</li>
<li>列表list、字符串string、元组tuple等原生数据结构只是可迭代对象而不是迭代器，而<strong>集合set是迭代器</strong>。</li>
</ul>
<h2 id="3-2-iter-方法"><a href="#3-2-iter-方法" class="headerlink" title="3.2 __ iter __ 方法"></a>3.2 __ iter __ 方法</h2><p>该方法只在迭代器首次激活时被调用，其作用是告诉程序返回值是一个<strong>可迭代对象</strong>。</p>

      
    </div>
    
    
    

    

    

    

    <div>
      
        <div>
    
        <div style="text-align:center;color: #ccc;font-size:14px;">-------------　　　　本文结束　<i class="fa fa-heart"></i>　感谢您的阅读 <i class="fa fa-heart"></i> 若有不足请指教　　　　-------------</div>

      
    </div>

    <footer class="post-footer">
      
        <div class="post-tags">
          
            <a href="/tags/python基础/" rel="tag"># python基础</a>
          
        </div>
      

      
      
      

      
        <div class="post-nav">
          <div class="post-nav-next post-nav-item">
            
              <a href="/python基础：文件" rel="next" title="python基础：文件">
                <i class="fa fa-chevron-left"></i> python基础：文件
              </a>
            
          </div>

          <span class="post-nav-divider"></span>

          <div class="post-nav-prev post-nav-item">
            
              <a href="/python基础：爬虫" rel="prev" title="python基础：爬虫">
                python基础：爬虫 <i class="fa fa-chevron-right"></i>
              </a>
            
          </div>
        </div>
      

      
      
    </footer>
  </div>
  
  
  
  </div></article>



    <div class="post-spread">
      
    </div>
  </div>


          </div>
          


          

  
    <div class="comments" id="comments">
      <div id="lv-container" data-id="city" data-uid="MTAyMC80NjA4NS8yMjU5Ng=="></div>
    </div>

  



        </div>
        
          
  
  <div class="sidebar-toggle">
    <div class="sidebar-toggle-line-wrap">
      <span class="sidebar-toggle-line sidebar-toggle-line-first"></span>
      <span class="sidebar-toggle-line sidebar-toggle-line-middle"></span>
      <span class="sidebar-toggle-line sidebar-toggle-line-last"></span>
    </div>
  </div>

  <aside id="sidebar" class="sidebar">
    
    <div class="sidebar-inner">

      

      
        <ul class="sidebar-nav motion-element">
          <li class="sidebar-nav-toc sidebar-nav-active" data-target="post-toc-wrap">
            文章目录
          </li>
          <li class="sidebar-nav-overview" data-target="site-overview-wrap">
            站点概览
          </li>
        </ul>
      

      <section class="site-overview-wrap sidebar-panel">
        <div class="site-overview">
          <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">
            
              <img class="site-author-image" itemprop="image" src="/images/header.jpg" alt="HJ">
            
              <p class="site-author-name" itemprop="name">HJ</p>
              <p class="site-description motion-element" itemprop="description"></p>
          </div>

          <nav class="site-state motion-element">

            
              <div class="site-state-item site-state-posts">
              
                <a href="/archives">
              
                  <span class="site-state-item-count">16</span>
                  <span class="site-state-item-name">日志</span>
                </a>
              </div>
            

            
              
              
              <div class="site-state-item site-state-categories">
                <a href="/categories/index.html">
                  <span class="site-state-item-count">4</span>
                  <span class="site-state-item-name">分类</span>
                </a>
              </div>
            

            
              
              
              <div class="site-state-item site-state-tags">
                <a href="/tags/index.html">
                  <span class="site-state-item-count">4</span>
                  <span class="site-state-item-name">标签</span>
                </a>
              </div>
            

          </nav>

          

          
            <div class="links-of-author motion-element">
                
                  <span class="links-of-author-item">
                    <a href="https://github.com/SenSe-HJ" target="_blank" title="GitHub">
                      
                        <i class="fa fa-fw fa-github"></i>GitHub</a>
                  </span>
                
                  <span class="links-of-author-item">
                    <a href="https://blog.csdn.net/qq_37111647" target="_blank" title="CSDN">
                      
                        <i class="fa fa-fw fa-ioxhost"></i>CSDN</a>
                  </span>
                
            </div>
          

          
          

          
          

          <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=437392&auto=0&height=66"></iframe>

        </div>
      </section>

      
      <!--noindex-->
        <section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active">
          <div class="post-toc">

            
              
            

            
              <div class="post-toc-content"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#一、列表生成式"><span class="nav-number">1.</span> <span class="nav-text">一、列表生成式</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#1-1-列表生成式的作用"><span class="nav-number">1.1.</span> <span class="nav-text">1.1 列表生成式的作用</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#1-2-基本语句类型"><span class="nav-number">1.2.</span> <span class="nav-text">1.2 基本语句类型</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1-2-1-表达式-for-循环"><span class="nav-number">1.2.1.</span> <span class="nav-text">1.2.1 表达式 + for 循环</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#1-2-2-表达式-for-循环-if-判断"><span class="nav-number">1.2.2.</span> <span class="nav-text">1.2.2 表达式 + for 循环 + if 判断</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#1-2-3-表达式-双层-for-循环"><span class="nav-number">1.2.3.</span> <span class="nav-text">1.2.3 表达式 + 双层 for 循环</span></a></li></ol></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#二、生成器（generator）"><span class="nav-number">2.</span> <span class="nav-text">二、生成器（generator）</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#2-1-生成器的作用"><span class="nav-number">2.1.</span> <span class="nav-text">2.1 生成器的作用</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#2-2-生成器的简单创建方法"><span class="nav-number">2.2.</span> <span class="nav-text">2.2 生成器的简单创建方法</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#2-3-生成器的函数生成方法"><span class="nav-number">2.3.</span> <span class="nav-text">2.3 生成器的函数生成方法</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#三、迭代器"><span class="nav-number">3.</span> <span class="nav-text">三、迭代器</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#3-1-迭代对象与迭代器的关系"><span class="nav-number">3.1.</span> <span class="nav-text">3.1 迭代对象与迭代器的关系</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#3-2-iter-方法"><span class="nav-number">3.2.</span> <span class="nav-text">3.2 __ iter __ 方法</span></a></li></ol></li></ol></div>
            

          </div>
        </section>
      <!--/noindex-->
      

      

    </div>
  </aside>


        
      </div>
    </main>

    <footer id="footer" class="footer">
      <div class="footer-inner">
        <script async src="https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"></script>

<div class="theme-info">
  <div class="powered-by"></div>
  <span class="post-count">博客全站共16.4k字</span>
</div>

<div class="copyright">&copy; <span itemprop="copyrightYear">2019</span>
  <span class="with-love">
    <i class="fa fa-user"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">HJ</span>

  
</div>


<div class="powered-by">
<i class="fa fa-user-md"></i><span id="busuanzi_container_site_uv">
  本站访客数:<span id="busuanzi_value_site_uv"></span>
</span>
</div>



        







        
      </div>
    </footer>

    
      <div class="back-to-top">
        <i class="fa fa-arrow-up"></i>
        
      </div>
    

    

  </div>

  

<script type="text/javascript">
  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {
    window.Promise = null;
  }
</script>









  












  
  
    <script type="text/javascript" src="/lib/jquery/index.js?v=2.1.3"></script>
  

  
  
    <script type="text/javascript" src="/lib/fastclick/lib/fastclick.min.js?v=1.0.6"></script>
  

  
  
    <script type="text/javascript" src="/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7"></script>
  

  
  
    <script type="text/javascript" src="/lib/velocity/velocity.min.js?v=1.2.1"></script>
  

  
  
    <script type="text/javascript" src="/lib/velocity/velocity.ui.min.js?v=1.2.1"></script>
  

  
  
    <script type="text/javascript" src="/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>
  


  


  <script type="text/javascript" src="/js/src/utils.js?v=5.1.4"></script>

  <script type="text/javascript" src="/js/src/motion.js?v=5.1.4"></script>



  
  


  <script type="text/javascript" src="/js/src/affix.js?v=5.1.4"></script>

  <script type="text/javascript" src="/js/src/schemes/pisces.js?v=5.1.4"></script>



  
  <script type="text/javascript" src="/js/src/scrollspy.js?v=5.1.4"></script>
<script type="text/javascript" src="/js/src/post-details.js?v=5.1.4"></script>



  


  <script type="text/javascript" src="/js/src/bootstrap.js?v=5.1.4"></script>



  


  




	





  





  
    <script type="text/javascript">
      (function(d, s) {
        var j, e = d.getElementsByTagName(s)[0];
        if (typeof LivereTower === 'function') { return; }
        j = d.createElement(s);
        j.src = 'https://cdn-city.livere.com/js/embed.dist.js';
        j.async = true;
        e.parentNode.insertBefore(j, e);
      })(document, 'script');
    </script>
  












  





  

  

  

  
  

  

  

  

</body>
</html>
