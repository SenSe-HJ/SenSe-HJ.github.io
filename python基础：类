<!DOCTYPE html>



  


<html class="theme-next gemini use-motion" lang="zh-Hans">
<head><meta name="generator" content="Hexo 3.9.0">
  <meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
<meta name="theme-color" content="#222">

<script>
    (function () {
        if ('') {
            if (prompt('请输入文章密码') !== '') {
                alert('密码错误！');
                if (history.length === 1) {
                    location.replace("https://evenyao.com"); // 这里替换成你的首页
                } else {
                    history.back();
                }
            }
        }
    })();
</script>








<meta http-equiv="Cache-Control" content="no-transform">
<meta http-equiv="Cache-Control" content="no-siteapp">
















  
  
  <link href="/lib/fancybox/source/jquery.fancybox.css?v=2.1.5" rel="stylesheet" type="text/css">







<link href="/lib/font-awesome/css/font-awesome.min.css?v=4.6.2" rel="stylesheet" type="text/css">

<link href="/css/main.css?v=5.1.4" rel="stylesheet" type="text/css">


  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon.png?v=5.1.4">


  <link rel="icon" type="image/png" sizes="32x32" href="/images/s-32×32.png?v=5.1.4">


  <link rel="icon" type="image/png" sizes="16x16" href="/images/s-16×16.png?v=5.1.4">


  <link rel="mask-icon" href="/images/logo.svg?v=5.1.4" color="#222">





  <meta name="keywords" content="python基础,">










<meta name="description" content="一、类、类对象、实例对象三者关系1234567891011class Shuai:	content = &apos;帅健最帅&apos;	def con_print(self):            print(content)# 以上代码进行的是“类的定义”，即称为类。a = Shuai # 类名不带括号，即为类对象b = Shuai() # 类名带括号，即为实例对象  1.1 类这里的类指的是，定义类内容的过程">
<meta name="keywords" content="python基础">
<meta property="og:type" content="article">
<meta property="og:title" content="python基础：类">
<meta property="og:url" content="https://github.com/SenSe-HJ/python基础：类">
<meta property="og:site_name" content="SenSe-HJ">
<meta property="og:description" content="一、类、类对象、实例对象三者关系1234567891011class Shuai:	content = &apos;帅健最帅&apos;	def con_print(self):            print(content)# 以上代码进行的是“类的定义”，即称为类。a = Shuai # 类名不带括号，即为类对象b = Shuai() # 类名带括号，即为实例对象  1.1 类这里的类指的是，定义类内容的过程">
<meta property="og:locale" content="zh-Hans">
<meta property="og:updated_time" content="2019-08-20T17:51:27.683Z">
<meta name="twitter:card" content="summary">
<meta name="twitter:title" content="python基础：类">
<meta name="twitter:description" content="一、类、类对象、实例对象三者关系1234567891011class Shuai:	content = &apos;帅健最帅&apos;	def con_print(self):            print(content)# 以上代码进行的是“类的定义”，即称为类。a = Shuai # 类名不带括号，即为类对象b = Shuai() # 类名带括号，即为实例对象  1.1 类这里的类指的是，定义类内容的过程">



<script type="text/javascript" id="hexo.configurations">
  var NexT = window.NexT || {};
  var CONFIG = {
    root: '/',
    scheme: 'Gemini',
    version: '5.1.4',
    sidebar: {"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},
    fancybox: true,
    tabs: true,
    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},
    duoshuo: {
      userId: '0',
      author: '博主'
    },
    algolia: {
      applicationID: '',
      apiKey: '',
      indexName: '',
      hits: {"per_page":10},
      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}
    }
  };
</script>



  <link rel="canonical" href="https://github.com/SenSe-HJ/python基础：类">





<link rel="stylesheet" href="<%- url_for('/fa-brands/css/fa-brands.min.css') %>">
<link rel="stylesheet" href="<%- url_for('/fa-regular/css/fa-regular.min.css') %>">
<link rel="stylesheet" href="<%- url_for('/fa-solid/css/fa-solid.min.css') %>">
<link rel="stylesheet" href="<%- url_for('/fontawesome/css/fontawesome.min.css') %>">
<link rel="stylesheet" href="<%- url_for('/fontawesome-all/css/fontawesome-all.css') %>">

<link href="https://use.fontawesome.com/releases/v5.0.4/css/all.css" rel="stylesheet">

  <title>python基础：类 | SenSe-HJ</title>
  








</head>

<body itemscope itemtype="http://schema.org/WebPage" lang="zh-Hans">

  
  
    
  

  <div class="container sidebar-position-left page-post-detail">
    <div class="headband"></div>

    <a href="https://github.com/SenSe-HJ" class="github-corner" aria-label="View source on GitHub"><svg width="80" height="80" viewbox="0 0 250 250" style="fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;" aria-hidden="true"><path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"/><path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"/><path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"/></svg></a><style>.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}</style>

    <header id="header" class="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="header-inner"><div class="site-brand-wrapper">
  <div class="site-meta ">
    

    <div class="custom-logo-site-title">
      <a href="/" class="brand" rel="start">
        <span class="logo-line-before"><i></i></span>
        <span class="site-title">SenSe-HJ</span>
        <span class="logo-line-after"><i></i></span>
      </a>
    </div>
      
        <p class="site-subtitle">一个展现自我的平台</p>
      
  </div>

  <div class="site-nav-toggle">
    <button>
      <span class="btn-bar"></span>
      <span class="btn-bar"></span>
      <span class="btn-bar"></span>
    </button>
  </div>
</div>

<nav class="site-nav">
  

  
    <ul id="menu" class="menu">
      
        
        <li class="menu-item menu-item-home">
          <a href="/" rel="section">
            
            首页
          </a>
        </li>
      
        
        <li class="menu-item menu-item-tags">
          <a href="/tags/" rel="section">
            
            标签
          </a>
        </li>
      
        
        <li class="menu-item menu-item-categories">
          <a href="/categories/" rel="section">
            
            分类
          </a>
        </li>
      
        
        <li class="menu-item menu-item-关于我">
          <a href="/about_me/" rel="section">
            
            关于我
          </a>
        </li>
      

      
    </ul>
  

  
</nav>



 </div>
    </header>

    <main id="main" class="main">
      <div class="main-inner">
        <div class="content-wrap">
          <div id="content" class="content">
            

  <div id="posts" class="posts-expand">
    

  

  
  
  

  <article class="post post-type-normal" itemscope itemtype="http://schema.org/Article">
  
  
  
  <div class="post-block">
    <link itemprop="mainEntityOfPage" href="https://github.com/SenSe-HJ/python基础：类">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="name" content="HJ">
      <meta itemprop="description" content>
      <meta itemprop="image" content="/images/header.jpg">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="SenSe-HJ">
    </span>

    
      <header class="post-header">

        
        
          <h1 class="post-title" itemprop="name headline">python基础：类</h1>
        

        <div class="post-meta">

          <span class="post-time">
            
              <span class="post-meta-item-icon">
                <i class="fa fa-calendar-o"></i>
              </span>
              
                <span class="post-meta-item-text">发表于</span>
              
              <time title="创建于" itemprop="dateCreated datePublished" datetime="2019-08-01T15:58:23+08:00">
                2019-08-01
              </time>
            

            

            
          </span>

          
            <span class="post-category">
            
              <span class="post-meta-divider">|</span>
            
              <span class="post-meta-item-icon">
                <i class="fa fa-folder-o"></i>
              </span>
              
                <span class="post-meta-item-text">分类于</span>
              
              
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/categories/python基础/" itemprop="url" rel="index">
                    <span itemprop="name">python基础</span>
                  </a>
                </span>

                
                
              
            </span>
          

          
            
          

          
          

          

          

          

        </div>
      </header>
    

    
    
    
    <div class="post-body" itemprop="articleBody">

      
      

      
        <h1 id="一、类、类对象、实例对象三者关系"><a href="#一、类、类对象、实例对象三者关系" class="headerlink" title="一、类、类对象、实例对象三者关系"></a>一、类、类对象、实例对象三者关系</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shuai</span>:</span></span><br><span class="line">	content = <span class="string">'帅健最帅'</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">con_print</span><span class="params">(self)</span>:</span></span><br><span class="line">            print(content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以上代码进行的是“类的定义”，即称为类。</span></span><br><span class="line"></span><br><span class="line">a = Shuai <span class="comment"># 类名不带括号，即为类对象</span></span><br><span class="line"></span><br><span class="line">b = Shuai() <span class="comment"># 类名带括号，即为实例对象</span></span><br></pre></td></tr></table></figure>

<h2 id="1-1-类"><a href="#1-1-类" class="headerlink" title="1.1 类"></a>1.1 类</h2><p>这里的类指的是，定义类内容的过程。</p>
<h2 id="1-2类对象与实例对象的区别"><a href="#1-2类对象与实例对象的区别" class="headerlink" title="1.2类对象与实例对象的区别"></a>1.2类对象与实例对象的区别</h2><ul>
<li><strong>从形式上</strong>：类对象不带括号，而实例对象带括号。（联想：对于函数，不带括号时系统认为是函数变量，带括号系统则认为进行了具体的函数操作）</li>
<li><strong>从功能上</strong>：类对象与实例对象的关系就好比，苹果与‘红苹果、青苹果’之间的关系。苹果是对‘红苹果、青苹果’的统称；而‘红苹果、青苹果’是苹果的具体品种，具有苹果的一般形状（属性）与功效（方法）</li>
</ul>
<h1 id="二、类的基本定义（属性、方法）"><a href="#二、类的基本定义（属性、方法）" class="headerlink" title="二、类的基本定义（属性、方法）"></a>二、类的基本定义（属性、方法）</h1><p>类是由<strong>属性</strong>和<strong>方法</strong>两大部分构成。其中属性 == 变量赋值，方法  == 函数定义。</p>
<h2 id="2-1-属性"><a href="#2-1-属性" class="headerlink" title="2.1 属性"></a>2.1 属性</h2><p>类的属性可以分为类属性与实例属性。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shuai</span>:</span></span><br><span class="line">    content = <span class="string">'best'</span>           <span class="comment"># 这是 类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.x = <span class="number">4</span>             <span class="comment"># 这是实例属性</span></span><br><span class="line">        self.y = <span class="number">5</span>             <span class="comment"># 这是实例属性</span></span><br><span class="line">        Shuai.count = <span class="number">6</span>        <span class="comment"># 这是 类属性（类名.属性名）</span></span><br></pre></td></tr></table></figure>

<h3 id="2-1-1-实例属性"><a href="#2-1-1-实例属性" class="headerlink" title="2.1.1 实例属性"></a>2.1.1 实例属性</h3><p>&nbsp;　　实例属性是指只有实例对象才拥有的属性，而类对象没有。若对类对象访问实例属性则会报错。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Shuai.x</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#7&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    Shuai.x</span><br><span class="line">AttributeError: type object <span class="string">'Shuai'</span> has no attribute <span class="string">'x'</span></span><br></pre></td></tr></table></figure>

<p>实例属性的定义主要是通过<strong>方法内的self.变量名赋值来实现</strong>以及<strong>类定义后实例对象.变量赋值</strong>两种途径。</p>
<ul>
<li><strong>注意1</strong>：第二种定义方法中，定义得到的实例属性只适用于该实例对象；其他实例对象没有。（通俗的说就是：可以给特定的实例对象赋予新的属性）</li>
<li><strong>注意2</strong>：每个实例对象的实例属性可以通过后期赋值改变而各不相同，没有约束。</li>
<li><strong>注意3</strong>：self 的意义就是<strong>对实例对象的指代</strong>，以供后期实例对象调用属性和方法时，能找到对应的内容。</li>
</ul>
<h3 id="2-1-2-类属性"><a href="#2-1-2-类属性" class="headerlink" title="2.1.2 类属性"></a>2.1.2 类属性</h3><p>类属性简单来说就是，类对象拥有的属性，即对类对象访问类属性不会报错。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Shuai.content</span><br><span class="line"><span class="string">'best'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Shuai.count</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>

<p>类属性主要是通过<strong>方法外的变量赋值</strong>、<strong>方法内的类名.变量赋值</strong>两个个途径来定义。<br><strong>实例对象与类对象关于类属性的联系与区别见以下代码解释。</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = Shuai()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = Shuai()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(Shuai.content,‘\n’,a.content,‘\n’, b.content)</span><br><span class="line">best</span><br><span class="line">best</span><br><span class="line">best</span><br><span class="line"><span class="comment"># 说明：实例对象也可以对类属性进行访问。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Shuai.content = <span class="string">'best and best'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(Shuai.content,<span class="string">'\n'</span>,a.content,<span class="string">'\n'</span>,b.content)</span><br><span class="line">best <span class="keyword">and</span> best</span><br><span class="line">best <span class="keyword">and</span> best</span><br><span class="line">best <span class="keyword">and</span> best</span><br><span class="line"><span class="comment"># 说明：对类对象进行类属性的重新赋值，实例属性所访问的类属性也会随之改变。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.content = <span class="string">'last'</span> <span class="comment"># 新建一个与‘类属性同名’的实例属性</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(Shuai.content,<span class="string">'\n'</span>,a.content,<span class="string">'\n'</span>,b.content)</span><br><span class="line">best <span class="keyword">and</span> best</span><br><span class="line">best <span class="keyword">and</span> best</span><br><span class="line">last</span><br><span class="line"><span class="comment"># 说明：新建的‘类属性同名’的实例属性会覆盖掉实例对象与该类属性的联系</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Shuai.content = <span class="string">'best and best and best'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(Shuai.content,<span class="string">'\n'</span>,a.content,<span class="string">'\n'</span>,b.content)</span><br><span class="line">best <span class="keyword">and</span> best <span class="keyword">and</span> best</span><br><span class="line">best <span class="keyword">and</span> best <span class="keyword">and</span> best</span><br><span class="line">last</span><br><span class="line"><span class="comment"># 说明：该实例对象的该属性不会随着类属性的变化而变化</span></span><br></pre></td></tr></table></figure>

<p>以下是类属性的关系流程图：</p>
<p>类属性的访问</p>
<p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/20190720110752569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MTExNjQ3,size_16,color_FFFFFF,t_70#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/20190720110752569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MTExNjQ3,size_16,color_FFFFFF,t_70#pic_center</a> =500x350)<br>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/20190720110819803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MTExNjQ3,size_16,color_FFFFFF,t_70#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/20190720110819803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MTExNjQ3,size_16,color_FFFFFF,t_70#pic_center</a> =550x400)</p>
<h3 id="2-1-3-类属性与实例属性的具体作用"><a href="#2-1-3-类属性与实例属性的具体作用" class="headerlink" title="2.1.3 类属性与实例属性的具体作用"></a>2.1.3 类属性与实例属性的具体作用</h3><ul>
<li>类属性一般仅用来<strong>跟踪</strong>与类相关的值，比如统计实例对象的数量等等。但要注意不要使新建的实例属性覆盖了与类属性的联系</li>
<li>而实例属性是一个更为常用的属性，能够使得每个实例对象的<strong>初始值相同</strong>，而对某一实例对象的修改，不影响其他实例对象。</li>
</ul>
<h3 id="2-1-4-属性的访问限制"><a href="#2-1-4-属性的访问限制" class="headerlink" title="2.1.4 属性的访问限制"></a>2.1.4 属性的访问限制</h3><p>由于类对象就是一个封装的代码，便可能有些<strong>不想让外部访问的属性</strong>。在Python中，可以用双下划线“__”开头命名属性。这类属性可以在类定义过程中被调用，而在外部不能被调用。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__score = score</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s: %s'</span> % (self.__name, self.__score))</span><br></pre></td></tr></table></figure>

<p>以上代码运行后，尝试访问__name属性：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a1 = Student(<span class="string">'帅健'</span>,<span class="number">150</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a1.__name</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#1&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    a1.__name</span><br><span class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'__name'</span></span><br></pre></td></tr></table></figure>

<p>实际上，Python中实现该访问限制功能的方法是，将双下划线“<em>_”开头的属性自动改为了“</em> 类名 __属性名”。可在类定义后采用该方法访问。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a1._Student__name</span><br><span class="line"><span class="string">'帅健'</span></span><br></pre></td></tr></table></figure>

<p>但是强烈建议你不要这么干，因为不同版本的Python解释器可能会把双下划线“__”开头的属性名改成不同的属性名。<br>此节内容可参考廖雪峰的教程。<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017496679217440" target="_blank" rel="noopener">廖雪峰教程关于访问限制的描述</a></p>
<h2 id="2-2-方法"><a href="#2-2-方法" class="headerlink" title="2.2 方法"></a>2.2 方法</h2><p>方法可分为<strong>实例方法，类方法和静态方法</strong>。一般我们用到的都是实例方法。</p>
<h3 id="2-2-1-实例方法"><a href="#2-2-1-实例方法" class="headerlink" title="2.2.1 实例方法"></a>2.2.1 实例方法</h3><p><strong>定义方式</strong>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 方法名（<span class="title">self</span>，*其他变量）:</span></span><br></pre></td></tr></table></figure>

<ul>
<li>第一个形参必须是self，用于指代实例对象。在方法中可以通过“self.属性名”来访问与修改实例对象的属性。</li>
</ul>
<p><strong>调用方式</strong>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">实例对象.方法名（）</span><br></pre></td></tr></table></figure>

<ul>
<li>实例方法只有实例对象能够调用，而类对象不能调用。</li>
<li>实例对象在调用实例方法时，self会自动与该实例对象进行绑定。无需再输入self的实参，直接从其他变量开始输入。</li>
</ul>
<p>举例（打印学生成绩）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__score = score</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s: %s'</span> % (self.__name, self.__score))</span><br></pre></td></tr></table></figure>

<p>运行并调用实例方法，结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = Student(<span class="string">'张三'</span>,<span class="number">60</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.print_score()</span><br><span class="line">张三: <span class="number">60</span></span><br></pre></td></tr></table></figure>

<p>魔法方法见后期单独讲。</p>
<h3 id="2-2-2-类方法"><a href="#2-2-2-类方法" class="headerlink" title="2.2.2 类方法"></a>2.2.2 类方法</h3><p>作用：</p>
<ul>
<li>类方法的作用，一般就是不基于实体对象，用类对象去获取一些与类有关的量。</li>
</ul>
<p>定义方式：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod #修饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 方法名（<span class="title">cls</span>，*其他变量）:</span></span><br></pre></td></tr></table></figure>

<ul>
<li>类对象只有类对象能够调用，而实例对象不能调用。</li>
<li>类对象在调用实例方法时，cls会自动与该实例对象进行绑定。无需再输入cls的实参，直接从其他变量开始输入。</li>
</ul>
<p>举例（利用类方法，获取实例对象的数量）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    __count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__score = score</span><br><span class="line">        Student.__count += <span class="number">1</span>  <span class="comment"># 在实例方法中要调用类属性，则应该用“类名.类属性名”来调用</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s: %s'</span> % (self.__name, self.__score))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        Student.__count -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod  #装饰器，即将定义类方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCount</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls.__count</span><br></pre></td></tr></table></figure>

<p>运行并调用类方法，结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = Student(<span class="string">'张三'</span>,<span class="number">60</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = Student(<span class="string">'李四'</span>,<span class="number">70</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Student(<span class="string">'王五'</span>,<span class="number">80</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Student.getCount()</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-3-静态方法"><a href="#2-2-3-静态方法" class="headerlink" title="2.2.3 静态方法"></a>2.2.3 静态方法</h3><p>作用：</p>
<ul>
<li>静态方法一般用于无需调用类属性或者实例属性的方法中。这样子的方法既可以用于类对象，又可以用于实例对象中。</li>
</ul>
<p>定义方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@staticmethod #修饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 方法名（*其他变量）:</span></span><br></pre></td></tr></table></figure>

<ul>
<li>静态方法的变量无需self或者cls，直接输入其他形参即可。</li>
<li>类对象与实例对象都可以使用静态方法。</li>
</ul>
<p>调用：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类名.方法名（）</span><br><span class="line">实例对象名.方法名（）</span><br></pre></td></tr></table></figure>

<ul>
<li>不同实例对象的静态方法的内存地址相同，即完全一样。</li>
</ul>
<p>举例：（打印老师名字）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod  #静态方法修饰器</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_teach</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'该班级的班主任是帅健'</span>)</span><br></pre></td></tr></table></figure>

<p>运行并调用静态方法，结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = Student()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.print_teach()</span><br><span class="line">该班级的班主任是帅健</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Student.print_teach()</span><br><span class="line">该班级的班主任是帅健</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.print_teach <span class="keyword">is</span> Student.print_teach</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h2 id="2-4-一些注意事项"><a href="#2-4-一些注意事项" class="headerlink" title="2.4 一些注意事项"></a>2.4 一些注意事项</h2><ul>
<li>若属性与方法名字相同，则新的会覆盖旧的。经常出现‘对实例对象赋予新的属性名，而覆盖掉与之同名的方法’的情况。</li>
</ul>
<h1 id="三、类的继承"><a href="#三、类的继承" class="headerlink" title="三、类的继承"></a>三、类的继承</h1><h2 id="3-1-简单的继承"><a href="#3-1-简单的继承" class="headerlink" title="3.1 简单的继承"></a>3.1 简单的继承</h2><h3 id="3-1-1-继承的作用："><a href="#3-1-1-继承的作用：" class="headerlink" title="3.1.1 继承的作用："></a>3.1.1 继承的作用：</h3><ul>
<li>子类可以得到父类所有的属性与方法，无需重新写代码。</li>
<li>继承后，可以对父类的属性与方法<strong>进行覆盖</strong>，从而修改或删除不需要的属性或方法。</li>
</ul>
<h3 id="3-1-2-继承的形式："><a href="#3-1-2-继承的形式：" class="headerlink" title="3.1.2 继承的形式："></a>3.1.2 继承的形式：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class 子类名（父类名）：</span><br></pre></td></tr></table></figure>

<p>举例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Animal is running...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>运行并调用，结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Animal().run()</span><br><span class="line">Animal <span class="keyword">is</span> running...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Dog().run()</span><br><span class="line">Animal <span class="keyword">is</span> running...</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：一个类可以继承多个类，在括号中用逗号隔开多个父类即可。<h3 id="3-1-3-对父类的覆盖"><a href="#3-1-3-对父类的覆盖" class="headerlink" title="3.1.3 对父类的覆盖"></a>3.1.3 对父类的覆盖</h3></li>
<li>父类的属性与方法是<strong>无法删除与修改</strong>的。</li>
<li>只能通过在子类中重新定义同名属性与方法，以<strong>覆盖掉父类</strong>的相关属性与方法。</li>
<li>其中定义同名方法内容用“pass”占位，可实现父类方法无效化。</li>
</ul>
<p>举例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span>   <span class="comment">#通过定义新的方法，从而使父类的同名方法在该子类中无效</span></span><br><span class="line">        <span class="keyword">pass</span>         <span class="comment">#可以填写新的方法内容，也可以使用“pass”占位。</span></span><br></pre></td></tr></table></figure>

<p>运行并调用，结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Animal().run()</span><br><span class="line">Animal <span class="keyword">is</span> running...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Cat().eat()</span><br><span class="line">Animal <span class="keyword">is</span> eating...  <span class="comment"># Cat类的run方法被重新定义了</span></span><br></pre></td></tr></table></figure>

<h3 id="3-1-4-在子类中调用同名父类方法"><a href="#3-1-4-在子类中调用同名父类方法" class="headerlink" title="3.1.4 在子类中调用同名父类方法"></a>3.1.4 在子类中调用同名父类方法</h3><p>当子类中定义有与父类同名的方法，但又想在方法中调用重名的父类方法，有以下两种方法可以实现。</p>
<h4 id="（1）父类名-方法名（self）"><a href="#（1）父类名-方法名（self）" class="headerlink" title="（1）父类名.方法名（self）"></a>（1）父类名.方法名（self）</h4><p>举例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self,speed)</span>:</span></span><br><span class="line">        print(<span class="string">'The animal is running with %s km/h'</span> % speed)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self,speed)</span>:</span></span><br><span class="line">        print(<span class="string">'The animal is a dog'</span>)</span><br><span class="line">        Animal.run(self,speed)</span><br></pre></td></tr></table></figure>

<p>运行并调用，结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Dog().run(<span class="number">10</span>)</span><br><span class="line">The animal <span class="keyword">is</span> a dog</span><br><span class="line">The animal <span class="keyword">is</span> running <span class="keyword">with</span> <span class="number">10</span> km/h</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：- 注意1：在使用该方法调用父类方法时，<strong>必须添加self形参</strong>，再输入其他形参。即父类方法的形参全部输入。</li>
<li>注意2：对于父类方法需要的形参，要在进行调用的方法中设置。（见第6行代码）</li>
</ul>
<h4 id="（2）super-方法名（-其他变量）"><a href="#（2）super-方法名（-其他变量）" class="headerlink" title="（2）super().方法名（*其他变量）"></a>（2）super().方法名（*其他变量）</h4><p>举例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self,speed)</span>:</span></span><br><span class="line">        print(<span class="string">'The animal is running with %s km/h'</span> % speed)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self,speed)</span>:</span>                 <span class="comment"># 输入父类方法需要的形参，方便传入父类方法中</span></span><br><span class="line">        print(<span class="string">'The animal is a dog'</span>)</span><br><span class="line">        super().run(speed)               <span class="comment"># super函数</span></span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Dog().run(<span class="number">10</span>)</span><br><span class="line">The animal <span class="keyword">is</span> a dog</span><br><span class="line">The animal <span class="keyword">is</span> running <span class="keyword">with</span> <span class="number">10</span> km/h</span><br></pre></td></tr></table></figure>

<ul>
<li>注意1：在使用super函数调用父类方法时，<strong>无需添加self形参</strong>，输入其他形参即可。</li>
<li>注意2：对于父类方法需要的形参，要在进行调用的方法中设置。（见第6行代码）</li>
</ul>
<h4 id="（3）两种方法的比较"><a href="#（3）两种方法的比较" class="headerlink" title="（3）两种方法的比较"></a>（3）两种方法的比较</h4><ul>
<li>由于第一种方法需要指定父类名字，而super方法会自动寻找父类。故现在用super函数比较方便，也便于后期修改代码。</li>
</ul>
<h2 id="3-2-多重继承"><a href="#3-2-多重继承" class="headerlink" title="3.2 多重继承"></a>3.2 多重继承</h2>
      
    </div>
    
    
    

    

    

    

    <div>
      
        <div>
    
        <div style="text-align:center;color: #ccc;font-size:14px;">-------------　　　　本文结束　<i class="fa fa-heart"></i>　感谢您的阅读 <i class="fa fa-heart"></i> 若有不足请指教　　　　-------------</div>

      
    </div>

    <footer class="post-footer">
      
        <div class="post-tags">
          
            <a href="/tags/python基础/" rel="tag"># python基础</a>
          
        </div>
      

      
      
      

      
        <div class="post-nav">
          <div class="post-nav-next post-nav-item">
            
              <a href="/python基础：字典" rel="next" title="python基础：字典">
                <i class="fa fa-chevron-left"></i> python基础：字典
              </a>
            
          </div>

          <span class="post-nav-divider"></span>

          <div class="post-nav-prev post-nav-item">
            
              <a href="/python基础：集合" rel="prev" title="python基础：集合">
                python基础：集合 <i class="fa fa-chevron-right"></i>
              </a>
            
          </div>
        </div>
      

      
      
    </footer>
  </div>
  
  
  
  </div></article>



    <div class="post-spread">
      
    </div>
  </div>


          </div>
          


          

  
    <div class="comments" id="comments">
      <div id="lv-container" data-id="city" data-uid="MTAyMC80NjA4NS8yMjU5Ng=="></div>
    </div>

  



        </div>
        
          
  
  <div class="sidebar-toggle">
    <div class="sidebar-toggle-line-wrap">
      <span class="sidebar-toggle-line sidebar-toggle-line-first"></span>
      <span class="sidebar-toggle-line sidebar-toggle-line-middle"></span>
      <span class="sidebar-toggle-line sidebar-toggle-line-last"></span>
    </div>
  </div>

  <aside id="sidebar" class="sidebar">
    
    <div class="sidebar-inner">

      

      
        <ul class="sidebar-nav motion-element">
          <li class="sidebar-nav-toc sidebar-nav-active" data-target="post-toc-wrap">
            文章目录
          </li>
          <li class="sidebar-nav-overview" data-target="site-overview-wrap">
            站点概览
          </li>
        </ul>
      

      <section class="site-overview-wrap sidebar-panel">
        <div class="site-overview">
          <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">
            
              <img class="site-author-image" itemprop="image" src="/images/header.jpg" alt="HJ">
            
              <p class="site-author-name" itemprop="name">HJ</p>
              <p class="site-description motion-element" itemprop="description"></p>
          </div>

          <nav class="site-state motion-element">

            
              <div class="site-state-item site-state-posts">
              
                <a href="/archives">
              
                  <span class="site-state-item-count">16</span>
                  <span class="site-state-item-name">日志</span>
                </a>
              </div>
            

            
              
              
              <div class="site-state-item site-state-categories">
                <a href="/categories/index.html">
                  <span class="site-state-item-count">4</span>
                  <span class="site-state-item-name">分类</span>
                </a>
              </div>
            

            
              
              
              <div class="site-state-item site-state-tags">
                <a href="/tags/index.html">
                  <span class="site-state-item-count">4</span>
                  <span class="site-state-item-name">标签</span>
                </a>
              </div>
            

          </nav>

          

          
            <div class="links-of-author motion-element">
                
                  <span class="links-of-author-item">
                    <a href="https://github.com/SenSe-HJ" target="_blank" title="GitHub">
                      
                        <i class="fa fa-fw fa-github"></i>GitHub</a>
                  </span>
                
                  <span class="links-of-author-item">
                    <a href="https://blog.csdn.net/qq_37111647" target="_blank" title="CSDN">
                      
                        <i class="fa fa-fw fa-ioxhost"></i>CSDN</a>
                  </span>
                
            </div>
          

          
          

          
          

          <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=437392&auto=0&height=66"></iframe>

        </div>
      </section>

      
      <!--noindex-->
        <section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active">
          <div class="post-toc">

            
              
            

            
              <div class="post-toc-content"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#一、类、类对象、实例对象三者关系"><span class="nav-number">1.</span> <span class="nav-text">一、类、类对象、实例对象三者关系</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#1-1-类"><span class="nav-number">1.1.</span> <span class="nav-text">1.1 类</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#1-2类对象与实例对象的区别"><span class="nav-number">1.2.</span> <span class="nav-text">1.2类对象与实例对象的区别</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#二、类的基本定义（属性、方法）"><span class="nav-number">2.</span> <span class="nav-text">二、类的基本定义（属性、方法）</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#2-1-属性"><span class="nav-number">2.1.</span> <span class="nav-text">2.1 属性</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#2-1-1-实例属性"><span class="nav-number">2.1.1.</span> <span class="nav-text">2.1.1 实例属性</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-1-2-类属性"><span class="nav-number">2.1.2.</span> <span class="nav-text">2.1.2 类属性</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-1-3-类属性与实例属性的具体作用"><span class="nav-number">2.1.3.</span> <span class="nav-text">2.1.3 类属性与实例属性的具体作用</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-1-4-属性的访问限制"><span class="nav-number">2.1.4.</span> <span class="nav-text">2.1.4 属性的访问限制</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#2-2-方法"><span class="nav-number">2.2.</span> <span class="nav-text">2.2 方法</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#2-2-1-实例方法"><span class="nav-number">2.2.1.</span> <span class="nav-text">2.2.1 实例方法</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-2-2-类方法"><span class="nav-number">2.2.2.</span> <span class="nav-text">2.2.2 类方法</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-2-3-静态方法"><span class="nav-number">2.2.3.</span> <span class="nav-text">2.2.3 静态方法</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#2-4-一些注意事项"><span class="nav-number">2.3.</span> <span class="nav-text">2.4 一些注意事项</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#三、类的继承"><span class="nav-number">3.</span> <span class="nav-text">三、类的继承</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#3-1-简单的继承"><span class="nav-number">3.1.</span> <span class="nav-text">3.1 简单的继承</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#3-1-1-继承的作用："><span class="nav-number">3.1.1.</span> <span class="nav-text">3.1.1 继承的作用：</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-1-2-继承的形式："><span class="nav-number">3.1.2.</span> <span class="nav-text">3.1.2 继承的形式：</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-1-3-对父类的覆盖"><span class="nav-number">3.1.3.</span> <span class="nav-text">3.1.3 对父类的覆盖</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-1-4-在子类中调用同名父类方法"><span class="nav-number">3.1.4.</span> <span class="nav-text">3.1.4 在子类中调用同名父类方法</span></a><ol class="nav-child"><li class="nav-item nav-level-4"><a class="nav-link" href="#（1）父类名-方法名（self）"><span class="nav-number">3.1.4.1.</span> <span class="nav-text">（1）父类名.方法名（self）</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#（2）super-方法名（-其他变量）"><span class="nav-number">3.1.4.2.</span> <span class="nav-text">（2）super().方法名（*其他变量）</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#（3）两种方法的比较"><span class="nav-number">3.1.4.3.</span> <span class="nav-text">（3）两种方法的比较</span></a></li></ol></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#3-2-多重继承"><span class="nav-number">3.2.</span> <span class="nav-text">3.2 多重继承</span></a></li></ol></li></ol></div>
            

          </div>
        </section>
      <!--/noindex-->
      

      

    </div>
  </aside>


        
      </div>
    </main>

    <footer id="footer" class="footer">
      <div class="footer-inner">
        <script async src="https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"></script>

<div class="theme-info">
  <div class="powered-by"></div>
  <span class="post-count">博客全站共16.4k字</span>
</div>

<div class="copyright">&copy; <span itemprop="copyrightYear">2019</span>
  <span class="with-love">
    <i class="fa fa-user"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">HJ</span>

  
</div>


<div class="powered-by">
<i class="fa fa-user-md"></i><span id="busuanzi_container_site_uv">
  本站访客数:<span id="busuanzi_value_site_uv"></span>
</span>
</div>



        







        
      </div>
    </footer>

    
      <div class="back-to-top">
        <i class="fa fa-arrow-up"></i>
        
      </div>
    

    

  </div>

  

<script type="text/javascript">
  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {
    window.Promise = null;
  }
</script>









  












  
  
    <script type="text/javascript" src="/lib/jquery/index.js?v=2.1.3"></script>
  

  
  
    <script type="text/javascript" src="/lib/fastclick/lib/fastclick.min.js?v=1.0.6"></script>
  

  
  
    <script type="text/javascript" src="/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7"></script>
  

  
  
    <script type="text/javascript" src="/lib/velocity/velocity.min.js?v=1.2.1"></script>
  

  
  
    <script type="text/javascript" src="/lib/velocity/velocity.ui.min.js?v=1.2.1"></script>
  

  
  
    <script type="text/javascript" src="/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>
  


  


  <script type="text/javascript" src="/js/src/utils.js?v=5.1.4"></script>

  <script type="text/javascript" src="/js/src/motion.js?v=5.1.4"></script>



  
  


  <script type="text/javascript" src="/js/src/affix.js?v=5.1.4"></script>

  <script type="text/javascript" src="/js/src/schemes/pisces.js?v=5.1.4"></script>



  
  <script type="text/javascript" src="/js/src/scrollspy.js?v=5.1.4"></script>
<script type="text/javascript" src="/js/src/post-details.js?v=5.1.4"></script>



  


  <script type="text/javascript" src="/js/src/bootstrap.js?v=5.1.4"></script>



  


  




	





  





  
    <script type="text/javascript">
      (function(d, s) {
        var j, e = d.getElementsByTagName(s)[0];
        if (typeof LivereTower === 'function') { return; }
        j = d.createElement(s);
        j.src = 'https://cdn-city.livere.com/js/embed.dist.js';
        j.async = true;
        e.parentNode.insertBefore(j, e);
      })(document, 'script');
    </script>
  












  





  

  

  

  
  

  

  

  

</body>
</html>
